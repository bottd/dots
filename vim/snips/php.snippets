# php.snippets - Snippets for php file type

global !p

class Arg(object):
	def __init__(self, arg):
		self.arg = arg
		self.name = arg.split('=')[0].strip()

	def __str__(self):
		return self.name

	def __unicode__(self):
		return self.name

	def is_kwarg(self):
		return '=' in self.arg

	def unprefixed(self):
		return self.name.strip('$')

def get_args(arglist):
	args = [Arg(arg) for arg in arglist.split(',') if arg]

	return args

def format_access(access):
	return " * @access  %s" % access

def format_arg(arg):
	return " * @param   %s  @todo" % arg

def format_return():
	return " * @return  @todo"

def write_docstring_args(args, snip):
	if not args:
		snip.rv += ' {0}'.format(snip)
		return

	for arg in args:
		snip += format_arg(arg)

def write_init_body(args, parents, snip):
	for arg in args:
		snip += "$this->_%s = %s" % (arg.unprefixed, arg)

endglobal

snippet _skel "PHP skeleton" b
`!v my#php#open()`

$0
endsnippet

snippet _config "PHP config file" b
`!v my#php#open()`

return [
	$0
];
endsnippet

snippet _php "<?php ?>" b
<?php

${0:${VISUAL}}

?>
endsnippet

snippet ignore "PHP CS ignore coding standards block" w
// @codingStandardsIgnoreStart
${0:${VISUAL}}
// @codingStandardsIgnoreEnd
endsnippet

snippet php "<?php ?>" w
<?php ${0:${VISUAL}} ?>
endsnippet

snippet q "Variable assignment" b
$$1 = $2;
endsnippet

snippet d "Define constant" b
define('${1:NAME}', ${2:value});
endsnippet

snippet post "$_POST['']" w
$_POST['$1']$0
endsnippet

snippet get "$_GET['']" w
$_GET['$1']$0
endsnippet

snippet request "$_REQUEST['']" w
$_REQUEST['$1']$0
endsnippet

snippet class "Class definition" b
/**
 * ${4:$1 class}.
 *
 * @package    `!v my#project#get("title")`
 * @category   `!v my#php#path_to_class_category(expand("%"))`
 * @author     `!v my#project#get("author")`
 * @copyright  `!v my#project#get("copyright")`
 */
class ${1:`!v my#php#path_to_class_name(expand("%"))`}${2: extends ${3:`!v my#php#path_to_parent_class_name(expand("%"))`}}
{
	${0:${VISUAL:\/\/ TODO}}
}
endsnippet

snippet _class "Class definition" b
`!v my#php#open()`

/**
 * `!v my#php#path_to_class_name(expand("%"))` class.
 *
 * @package    `!v my#project#get("title")`
 * @category   `!v my#php#path_to_class_category(expand("%"))`
 * @author     `!v my#project#get("author")`
 * @copyright  `!v my#project#get("copyright")`
 */
class `!v my#php#path_to_class_name(expand("%"))` extends `!v my#php#path_to_parent_class_name(expand("%"))`
{
	${0:${VISUAL}}
}
endsnippet

snippet fun "Function definition" b
/**
 * ${4:@todo: Docstring for $2.}`!p
snip.rv = ""

if t[1]:
	snip += format_access(t[1].strip())

args = get_args(t[3])
if args:
	write_docstring_args(args, snip)

snip += format_return()`
 */
${1:public }function ${2:fun_name}(${3})
{
	${0:${VISUAL:\/\/ TODO}}
}
endsnippet

snippet if "if (condition) { }" b
if (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

snippet else "else { }" b
else {
	${0:${VISUAL}}
}
endsnippet

snippet for "for" b
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${0:${VISUAL}}
}
endsnippet

snippet foreach "foreach" b
foreach ($${1:variable} as $${2:key} => $${3:value}) {
	${0:${VISUAL}}
}
endsnippet

snippet while "while (condition) { }" b
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

snippet do "do" b
do {
	${0:${VISUAL}}
} while (${1:/* condition */});
endsnippet

snippet * "Docblock" b
/**
 * $1
 */
endsnippet

snippet arrthis "'key' => $this->key," b
'$1' => $this->$1,
endsnippet
